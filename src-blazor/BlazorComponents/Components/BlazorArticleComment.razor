@using AngularAdapterBuild
@using BlazorComponents.Services
@attribute [GenerateAngular]
@inject IAppService app

<div class="card">
    <div class="card-block">
        <p class="card-text">
            <span class="blazor-hint">This is a Blazor component :-)</span>@Comment.body
        </p>
    </div>
    <div class="card-footer">
        <NavLink class="comment-author" href=@($"profile/{Comment.author.username}")>
            <img src="@Comment.author.image" class="comment-author-img" />
        </NavLink>
        &nbsp;
        <NavLink class="comment-author" href=@($"profile/{Comment.author.username}")>
            @Comment.author.username
        </NavLink>
        <span class="date-posted">
            @DateTime.Parse(Comment.createdAt).ToString("D")
        </span>
        <span class="mod-options" hidden="@(!canModify)" @onclick="DeleteClicked">
            <i class="ion-trash-a"></i> <span class="mod-options-text">Delete</span>
        </span>
        <span class="mod-options" @onclick="PrintClicked">
            <i class="ion-printer"></i> <span class="mod-options-text">Print to console</span>
        </span>
    </div>
</div>

@code {

    [Parameter]
    public Comment Comment { get; set; } = Comment.Empty();

    /// <summary>
    /// Event when the "delete" icon was clicked.
    /// Type "bool" just for compatibility with original Angular component, which also uses bool there.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnDeleteComment { get; set; } 

    /// <summary>
    /// Additional event when the "print" icon was clicked.
    /// Just for testing.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnPrintComment { get; set; }

    private bool canModify = true;


    protected override async Task OnParametersSetAsync() {
        canModify = (await app.GetCurrentUser())?.username == Comment.author.username;
    }

    private void DeleteClicked() {
        _ = OnDeleteComment.InvokeAsync(true);
    }

    private void PrintClicked() {
        _ = OnPrintComment.InvokeAsync(true);
    }

}
